#version: "3.9"

services:
  # ----------------------- ELK stack -----------------------
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ELASTIC_USERNAME=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ES_JAVA_OPTS=-Xms512m -Xmx512m

    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks: [transnet]
    ports:
      - "9200:9200"
    healthcheck:
      test: curl -s http://localhost:9200 || exit 1
      interval: 10s
      timeout: 5s
      retries: 10


  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    volumes:
      - ./srcs/services/observability/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    environment:
       - ELASTIC_USER=kibana_system_user
       - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}

    networks: [transnet]
    ports:
      - "5044:5044"
    depends_on:
      elasticsearch:
        condition: service_healthy


  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - transnet

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    environment:
    - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    - ELASTICSEARCH_USERNAME=kibana_system_user
    - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    networks: [transnet]
    ports:
      - "5601:5601"
    volumes:
      - ./srcs/services/observability/kibana/ft_saved.ndjson:/tmp/ft_saved.ndjson:ro
      - ./srcs/services/observability/kibana/import_dashboard.sh:/init/import_dashboard.sh:ro
      - ./srcs/services/observability/kibana/ft_dashboard.ndjson:/init/ft_dashboard.ndjson:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      retries: 20
    command:
      - bash
      - -c
      - |
        /usr/local/bin/kibana-docker &

        echo "‚è≥ Waiting for Kibana API..."
        until curl -s -u kibana_system_user:kibanapass http://localhost:5601/api/status >/dev/null; do
          sleep 30
        done

        echo "üìÅ Importing ft_saved.ndjson..."
        curl -s -X POST -H 'kbn-xsrf: true' \
          http://localhost:5601/api/saved_objects/_import?overwrite=true \
          --form file=@/tmp/ft_saved.ndjson

        echo "üìä Importing dashboard..."
        chmod +x /init/import_dashboard.sh
        sleep 10
        /init/import_dashboard.sh

        wait

    depends_on:
      - elasticsearch

  # ----------------------- Prometheus / Grafana -----------------------
  prometheus:
    image: prom/prometheus:v2.52.0
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=15d
    volumes:
      - ./srcs/services/observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./srcs/services/observability/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
    networks: [transnet]
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    networks: [transnet]
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./srcs/services/observability/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./srcs/services/observability/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    networks: [transnet]
    ports:
      - "9100:9100"
    pid: host
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/host/root:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/host/root'

  # ----------------------- Stress-ng load generator -----------------------
  loadgen:
    image: alpine:3.20
    entrypoint:
      - /bin/sh
      - -c
      - |
        apk add --no-cache stress-ng \
        && stress-ng --cpu 4 --timeout 60s
    networks: [transnet]

  # ----------------------- Main application -----------------------
  ft_transcendence:
    container_name: ft_transcendence
    image: ft_transcendence
    environment:
    - HOST=0.0.0.0
    - PORT=443
    - JWT_ACCESS_SECRET=${JWT_ACCESS_SECRET}
    - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    - JWT_2FA_ACCESS_SECRET=${JWT_2FA_ACCESS_SECRET}
    build:
      context: ./srcs/services/web
      dockerfile: Dockerfile
    ports:
      - "443:443"
    networks: [transnet]
    logging:
      driver: gelf
      options:
        gelf-address: "udp://localhost:5044"



  k6:
    image: grafana/k6:latest
    profiles: ["manual"]
    volumes:
      - ./srcs/services/observability/grafana/test_script.js:/test_script.js:ro
    command:
      - run
      - --out
      - experimental-prometheus-rw=http://prometheus:9090/api/v1/write
      - /test_script.js
    networks: [transnet]







# ----------------------- Volumes & networks -----------------------
volumes:
  esdata:
  grafana_data:

networks:
  transnet:
    driver: bridge
    name: transnet
